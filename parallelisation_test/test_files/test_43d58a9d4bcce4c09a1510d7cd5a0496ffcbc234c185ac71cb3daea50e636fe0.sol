/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _REMOTE_INO_PROT_H_RPCGEN
#define	_REMOTE_INO_PROT_H_RPCGEN



#ifdef __cplusplus
extern "C" {
#endif

#define MAX_REQ 9000
#define MAX_PATH 500
#include "xdr.h"

typedef uchar *filepath;

enum remino_callnum {
	OPEN = 1,
	CLOSE = 2,
	READ = 3,
	WRITE = 4,
	TRUNCATE = 6,
	UNLINK = 7,
	OPENDIR = 8,
	CLOSEDIR = 9,
	READDIR = 10,
	REWINDDIR = 11,
	MKDIR = 12,
	RMDIR = 13,
	LSTAT = 14,
	RENAME = 15,
	CHOWN = 16,
	CHMOD = 17,
	UTIMES = 18,
	READLINK = 19,
	LINK_H = 20,
	LINK_S = 21,
	READDIR2 = 22
};
typedef enum remino_callnum remino_callnum;

struct remino_open_args {
	filepath path;
	int flags;
	int mode;
};
typedef struct remino_open_args remino_open_args;

struct remino_close_args {
	int fd;
};
typedef struct remino_close_args remino_close_args;

struct remino_read_args {
	int fd;
	int pos;
	int len;
};
typedef struct remino_read_args remino_read_args;

struct remino_write_args {
	int fd;
	int pos;
	struct {
		u_int data_len;
		uchar *data_val;
	} data;
};
typedef struct remino_write_args remino_write_args;

struct remino_truncate_args {
	filepath path;
	int length;
};
typedef struct remino_truncate_args remino_truncate_args;

struct remino_path_args {
	filepath path;
};
typedef struct remino_path_args remino_path_args;

struct remino_dirptr_args {
	u_int dirptr;
};
typedef struct remino_dirptr_args remino_dirptr_args;

struct remino_dirptr2_args {
	u_int dirptr;
	int pos;
};
typedef struct remino_dirptr2_args remino_dirptr2_args;

struct remino_path_mode_args {
	filepath path;
	int mode;
};
typedef struct remino_path_mode_args remino_path_mode_args;

struct remino_rename_args {
	filepath from;
	filepath to;
};
typedef struct remino_rename_args remino_rename_args;

struct remino_chown_args {
	filepath path;
	int owner;
	int group;
};
typedef struct remino_chown_args remino_chown_args;

struct remino_utimes_args {
	filepath path;
	u_int asecs;
	u_int ausecs;
	u_int msecs;
	u_int musecs;
};
typedef struct remino_utimes_args remino_utimes_args;

struct remino_call {
	remino_callnum call;
	union {
		remino_open_args open;
		remino_close_args close;
		remino_read_args read;
		remino_write_args write;
		remino_truncate_args truncate;
		remino_path_args path_only;
		remino_dirptr_args dirptr_only;
		remino_dirptr2_args dirptr2;
		remino_path_mode_args path_mode;
		remino_rename_args rename;
		remino_chown_args chown;
		remino_utimes_args utimes;
	} remino_call_u;
};
typedef struct remino_call remino_call;

struct remino_open_reply {
	int err;
	int fd;
};
typedef struct remino_open_reply remino_open_reply;

struct remino_errno_reply {
	int err;
	int retval;
};
typedef struct remino_errno_reply remino_errno_reply;

struct remino_read_reply {
	int err;
	struct {
		u_int data_len;
		uchar *data_val;
	} data;
};
typedef struct remino_read_reply remino_read_reply;

struct remino_write_reply {
	int err;
	int size;
};
typedef struct remino_write_reply remino_write_reply;

struct remino_opendir_reply {
	int err;
	u_int dirptr;
};
typedef struct remino_opendir_reply remino_opendir_reply;

struct remino_readdir_entry {
	int ftype;
	filepath name;
	int fileid;
};
typedef struct remino_readdir_entry remino_readdir_entry;

struct remino_readdir_reply {
	int err;
	int retval;
	remino_readdir_entry entry;
};
typedef struct remino_readdir_reply remino_readdir_reply;

struct remino_stat_reply {
	int err;
	int retval;
	int mode;
	int nlink;
	int uid;
	int gid;
	int size;
	int blocksize;
	int rdev;
	int blocks;
	int fsid;
	int asec;
	int ausec;
	int msec;
	int musec;
	int csec;
	int cusec;
	int fileid;
};
typedef struct remino_stat_reply remino_stat_reply;

struct remino_readdir2_entry {
	remino_readdir_entry dirent;
	remino_stat_reply stat;
	struct remino_readdir2_entry *next;
};
typedef struct remino_readdir2_entry remino_readdir2_entry;

struct remino_readdir2_reply {
	int err;
	int retval;
	remino_readdir2_entry *list;
	bool_t eof;
};
typedef struct remino_readdir2_reply remino_readdir2_reply;

struct remino_readlink_reply {
	int err;
	int retval;
	filepath path;
};
typedef struct remino_readlink_reply remino_readlink_reply;

struct remino_reply {
	remino_callnum reply;
	union {
		remino_open_reply open;
		remino_errno_reply err;
		remino_read_reply read;
		remino_write_reply write;
		remino_opendir_reply opendir;
		remino_readdir_reply readdir;
		remino_readdir2_reply readdir2;
		remino_stat_reply stat;
		remino_readlink_reply readlink;
	} remino_reply_u;
};
typedef struct remino_reply remino_reply;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t myxdr_filepath(XDR *, filepath*);
extern  bool_t myxdr_remino_callnum(XDR *, remino_callnum*);
extern  bool_t myxdr_remino_open_args(XDR *, remino_open_args*);
extern  bool_t myxdr_remino_close_args(XDR *, remino_close_args*);
extern  bool_t myxdr_remino_read_args(XDR *, remino_read_args*);
extern  bool_t myxdr_remino_write_args(XDR *, remino_write_args*);
extern  bool_t myxdr_remino_truncate_args(XDR *, remino_truncate_args*);
extern  bool_t myxdr_remino_path_args(XDR *, remino_path_args*);
extern  bool_t myxdr_remino_dirptr_args(XDR *, remino_dirptr_args*);
extern  bool_t myxdr_remino_dirptr2_args(XDR *, remino_dirptr2_args*);
extern  bool_t myxdr_remino_path_mode_args(XDR *, remino_path_mode_args*);
extern  bool_t myxdr_remino_rename_args(XDR *, remino_rename_args*);
extern  bool_t myxdr_remino_chown_args(XDR *, remino_chown_args*);
extern  bool_t myxdr_remino_utimes_args(XDR *, remino_utimes_args*);
extern  bool_t myxdr_remino_call(XDR *, remino_call*);
extern  bool_t myxdr_remino_open_reply(XDR *, remino_open_reply*);
extern  bool_t myxdr_remino_errno_reply(XDR *, remino_errno_reply*);
extern  bool_t myxdr_remino_read_reply(XDR *, remino_read_reply*);
extern  bool_t myxdr_remino_write_reply(XDR *, remino_write_reply*);
extern  bool_t myxdr_remino_opendir_reply(XDR *, remino_opendir_reply*);
extern  bool_t myxdr_remino_readdir_entry(XDR *, remino_readdir_entry*);
extern  bool_t myxdr_remino_readdir_reply(XDR *, remino_readdir_reply*);
extern  bool_t myxdr_remino_stat_reply(XDR *, remino_stat_reply*);
extern  bool_t myxdr_remino_readdir2_entry(XDR *, remino_readdir2_entry*);
extern  bool_t myxdr_remino_readdir2_reply(XDR *, remino_readdir2_reply*);
extern  bool_t myxdr_remino_readlink_reply(XDR *, remino_readlink_reply*);
extern  bool_t myxdr_remino_reply(XDR *, remino_reply*);

#else /* K&R C */
extern bool_t myxdr_filepath();
extern bool_t myxdr_remino_callnum();
extern bool_t myxdr_remino_open_args();
extern bool_t myxdr_remino_close_args();
extern bool_t myxdr_remino_read_args();
extern bool_t myxdr_remino_write_args();
extern bool_t myxdr_remino_truncate_args();
extern bool_t myxdr_remino_path_args();
extern bool_t myxdr_remino_dirptr_args();
extern bool_t myxdr_remino_dirptr2_args();
extern bool_t myxdr_remino_path_mode_args();
extern bool_t myxdr_remino_rename_args();
extern bool_t myxdr_remino_chown_args();
extern bool_t myxdr_remino_utimes_args();
extern bool_t myxdr_remino_call();
extern bool_t myxdr_remino_open_reply();
extern bool_t myxdr_remino_errno_reply();
extern bool_t myxdr_remino_read_reply();
extern bool_t myxdr_remino_write_reply();
extern bool_t myxdr_remino_opendir_reply();
extern bool_t myxdr_remino_readdir_entry();
extern bool_t myxdr_remino_readdir_reply();
extern bool_t myxdr_remino_stat_reply();
extern bool_t myxdr_remino_readdir2_entry();
extern bool_t myxdr_remino_readdir2_reply();
extern bool_t myxdr_remino_readlink_reply();
extern bool_t myxdr_remino_reply();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_REMOTE_INO_PROT_H_RPCGEN */
